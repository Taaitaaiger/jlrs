[package]
name = "jlrs"
version = "0.17.0"
authors = ["Thomas van Doornmalen <thomas.vandoornmalen@gmail.com>"]
description = """
jlrs provides bindings to the Julia C API that enables Julia code to be called from Rust and more.
"""
documentation = "https://docs.rs/jlrs"
homepage = "https://github.com/Taaitaaiger/jlrs"
repository = "https://github.com/Taaitaaiger/jlrs"
readme = "../README.md"
keywords = ["Julia", "math", "mathematics", "bindings", "ffi"]
categories = ["api-bindings", "mathematics"]
license = "MIT"
edition = "2018"

[features]
# The only default feature is the prelude module
default = ["prelude"]

# Enable all features except `lts` and `debug`
full = ["prelude", "sync-rt", "tokio-rt", "async-std-rt", "jlrs-ndarray", "f16", "pyplot", "internal-types", "uv", "jlrs-derive"]


# Runtimes

# Enable sync runtime
sync-rt = []
# Enable async runtime
async-rt = ["async", "concurrent-queue", "deadqueue"]
# Enable async-std as backing runtime
async-std-rt = ["async-rt", "async-std"]
# Enable tokio as backing runtime
tokio-rt = ["async-rt", "tokio"]


# Utilities

# Enable task and channel traits used by the async runtime
async = ["futures", "crossbeam-channel", "async-trait"]
# Enable `ccall` module for use from `ccall`ed Rust functions
ccall = []
# Enable using `f16` as an inline wrapper for `Float16` data
f16 = ["half"]
# Enable all internal types
internal-types = []
# Enable converting a Julia array to an `ArrayView(Mut)` from ndarray
jlrs-ndarray = ["ndarray"]

extra-fields = []

# Enable the `prelude` module
prelude = []
# Enable the `pyplot` module
pyplot = []
# Enable `ccall` feature, link `libuv`, and enable `CCall::us_async_send`
uv = ["jl-sys/uv", "ccall"]
# Track borrowed array data separately for each thread, rather than globally.
unsafe-ledger = []

# Julia version

# Link debug build of Julia
debug = ["jl-sys/debug"]
# Link LTS version of Julia
lts = ["jl-sys/lts"]
# link nightly version of Julia
nightly = ["jl-sys/nightly"]
# Link 32-bits version of Julia on Linux
i686 = ["jl-sys/i686"]

# Internal

# Used to generate docs for docs.rs
docs = ["jl-sys/docs", "full", "nightly"]

[dependencies]
cfg-if = "1"
jl-sys = {version = "0.18", path = "../jl_sys" }
smallvec = "1"
thiserror = "1"
atomic_refcell = "0.1"

async-std = { version = "1.12", features = ["unstable"], optional = true }
async-trait = { version = "0.1", optional = true }
crossbeam-channel = { version = "0.5", optional = true }
futures = { version = "0.3", optional = true }
half = { version = "2", optional = true }
jlrs-derive = { version = "0.4", optional = true, path = "../jlrs_derive" }
ndarray = { version = "0.15", optional = true }
tokio = { version = "1", optional = true, features = ["rt", "time", "sync"]}
concurrent-queue = { version = "1.2", optional = true }
deadqueue = { version = "0.2", optional = true, features = ["resizable"]}

[dev-dependencies]
tokio = { version = "1", features = ["macros", "rt-multi-thread", "rt", "time", "sync"]}

[package.metadata.docs.rs]
features = ["docs"]
